
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  roleId: 'roleId',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  apiKey: 'apiKey'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  userId: 'userId',
  balance: 'balance'
};

exports.Prisma.JournalScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  isReversal: 'isReversal',
  reversalOfJournalId: 'reversalOfJournalId',
  balance: 'balance'
};

exports.Prisma.LedgerEntryScalarFieldEnum = {
  id: 'id',
  journalId: 'journalId',
  accountId: 'accountId',
  amount: 'amount'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startsAt: 'startsAt'
};

exports.Prisma.MarketScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name'
};

exports.Prisma.OutcomeScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  name: 'name',
  odds: 'odds'
};

exports.Prisma.BetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stake: 'stake',
  placedAt: 'placedAt',
  status: 'status',
  stakeJournalId: 'stakeJournalId'
};

exports.Prisma.BetLegScalarFieldEnum = {
  id: 'id',
  betId: 'betId',
  outcomeId: 'outcomeId',
  odds: 'odds',
  result: 'result'
};

exports.Prisma.DepositIntentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  depositJournalId: 'depositJournalId'
};

exports.Prisma.OutboxScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  payload: 'payload',
  createdAt: 'createdAt',
  publishedAt: 'publishedAt'
};

exports.Prisma.IdempotencyKeyScalarFieldEnum = {
  key: 'key',
  requestPath: 'requestPath',
  requestMethod: 'requestMethod',
  userId: 'userId',
  responseStatus: 'responseStatus',
  responseBody: 'responseBody',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AccountCategory = {
  USER: 'USER',
  EXTERNAL: 'EXTERNAL',
  WAGER: 'WAGER',
  PROFIT: 'PROFIT'
};

exports.BetLegResult = {
  PENDING: 'PENDING',
  WON: 'WON',
  LOST: 'LOST',
  PUSH: 'PUSH'
};

exports.DepositStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  User: 'User',
  Account: 'Account',
  Journal: 'Journal',
  LedgerEntry: 'LedgerEntry',
  Event: 'Event',
  Market: 'Market',
  Outcome: 'Outcome',
  Bet: 'Bet',
  BetLeg: 'BetLeg',
  DepositIntent: 'DepositIntent',
  Outbox: 'Outbox',
  IdempotencyKey: 'IdempotencyKey'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
